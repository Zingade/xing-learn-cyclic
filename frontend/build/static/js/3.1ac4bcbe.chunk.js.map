{"version":3,"sources":["components/Utils/FeesCell.js","components/Utils/FeesRow.js"],"names":["initialLoginValues","id","name","month","monthDisplay","amount","payMethod","useStyles","makeStyles","cellStat","alignItems","display","flexDirection","justifyContent","dialog","position","top","cash","fontSize","color","gpay","FeesCell","props","cellID","total","updateDatabase","React","useState","open","setOpen","useForm","values","handleInputChange","errors","setErrors","handleClose","classes","className","onClick","event","subString","target","startIndex","endIndex","search","substring","indexOf","Date","getFullYear","monthIndex","STUDENT_MAPPING","MONTH_COLUMNS","displayName","formatNumberCustom","Dialog","onClose","paper","DialogTitle","DialogContent","TextField","autoFocus","onFocus","select","variant","placeholder","margin","label","type","autoComplete","value","onChange","error","helperText","fullWidth","FormControl","style","InputLabel","Select","labelId","MenuItem","DialogActions","Button","temp","Object","every","x","validate","FeesRow","data","fees","map","fee","count","year"],"mappings":"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","file":"static/js/3.1ac4bcbe.chunk.js","sourcesContent":["import React from 'react'\r\nimport {formatNumberCustom} from './CommonFunctions'\r\nimport './Table.scss'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, makeStyles, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport {MONTH_COLUMNS,STUDENT_MAPPING} from '../Utils/CommonConstants'\r\nimport useForm from '../Resue/useForm'\r\n\r\nconst initialLoginValues = {\r\n    id:0,\r\n    name:'',\r\n    month:'',\r\n    monthDisplay:'',\r\n    amount:'',\r\n    payMethod:0,\r\n}\r\n    \r\nconst useStyles = makeStyles({\r\n  cellStat:{\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n  dialog:{\r\n    position: 'absolute',\r\n    top: 10\r\n  },\r\n  cash:{\r\n    fontSize: \"14px\",\r\n    color:\"blue\",\r\n  },\r\n  gpay:{\r\n    fontSize: \"14px\",\r\n    color:\"green\",\r\n  },\r\n})\r\n\r\nconst FeesCell = (props) => {\r\n  const {cellID, total, updateDatabase, payMethod} = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const {\r\n    values, \r\n    handleInputChange, \r\n    errors, \r\n    setErrors\r\n  } = useForm(initialLoginValues);\r\n\r\n  const validate = () =>{\r\n    let temp = {}\r\n    temp.amount = values.amount?\"\":\"Amount is required\"\r\n    setErrors({\r\n      ...temp\r\n    })\r\n    return Object.values(temp).every(x => x === \"\");\r\n  }\r\n\r\n  const handleClick = (event) => {\r\n    let subString = event.target.id;\r\n    let startIndex = 0;\r\n    let endIndex = subString.search(\"@\");\r\n    values.name = subString.substring(startIndex, endIndex);\r\n    if (values.name === \"Grand Total\"){\r\n        return -1;\r\n    }\r\n\r\n    subString = subString.substring(subString.indexOf('@')+1)\r\n    \r\n    startIndex = 0;\r\n    endIndex = subString.search(\"@\");\r\n    const year = subString.substring(startIndex, endIndex);\r\n    const currentYear = new Date().getFullYear();\r\n    \r\n    /*if (parseInt(year) !== currentYear){\r\n      return -1;\r\n    }*/\r\n\r\n    subString = subString.substring(subString.indexOf('@')+1)\r\n\r\n    startIndex = 0;\r\n    endIndex = subString.search(\"@\");\r\n    const monthIndex = subString.substring(startIndex, endIndex);\r\n    values.month = monthIndex;\r\n    values.monthDisplay = STUDENT_MAPPING[MONTH_COLUMNS[monthIndex]].displayName;\r\n    values.amount = subString.substring(subString.indexOf('@')+1)\r\n    values.payMethod = payMethod\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n      if(validate()){\r\n        setOpen(false);\r\n        updateDatabase(values)\r\n    }\r\n  };\r\n\r\nconst classes = useStyles()\r\n  return (\r\n    <div className={classes.cellStat}>\r\n      <div id={cellID} className={(payMethod === \"1\")?classes.gpay:classes.cash} onClick={handleClick}>\r\n        {\r\n          formatNumberCustom(total, 'int')\r\n        }\r\n      </div>\r\n      <Dialog open={open} onClose={handleClose} classes={{paper: classes.dialog}}>\r\n        <DialogTitle >{values.name}'s {values.monthDisplay} Payment</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            onFocus={event => {event.target.select()}}\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Amount Paid here..\" \r\n            margin=\"dense\"\r\n            id=\"amount\"\r\n            label=\"Amount Paid\"\r\n            type=\"text\"\r\n            name=\"amount\"\r\n            autoComplete='off'\r\n            value={values.amount}\r\n            onChange={handleInputChange}\r\n            {...(errors.amount && {error:true, helperText:errors.amount} )}\r\n            fullWidth\r\n          />\r\n        <FormControl variant=\"outlined\" fullWidth style={{margin:\"5px 0\"}}>\r\n          <InputLabel id=\"payMethodInput\" >Payment Method</InputLabel>\r\n          <Select\r\n            labelId=\"payMethod\"\r\n            id=\"papMethod\"\r\n            label=\"Payment Method\"\r\n            name=\"payMethod\"\r\n            value={values.payMethod}\r\n            onChange={handleInputChange}\r\n            fullWidth\r\n          >\r\n            <MenuItem value={\"0\"}>Cash</MenuItem>\r\n            <MenuItem value={\"1\"}>G Pay</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeesCell;\r\n  ","import FeesCell from './FeesCell';\r\nimport './Table.scss'\r\n\r\nfunction FeesRow(props) {\r\n  const {data, updateDatabase} = props;\r\n  return (\r\n    <>\r\n      <div className='row'>\r\n        <div className=\"cell\">\r\n          <div className=\"month-name\">\r\n            {data.name}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {\r\n        data.fees.map((fee,count) => (\r\n          <FeesCell\r\n            key={count}\r\n            updateDatabase={updateDatabase}\r\n            cellID={(data.name+\"@\"+data.year+\"@\"+count+\"@\"+fee.amount)}\r\n            total= {fee.amount}\r\n            payMethod= {fee.payMethod}\r\n            />\r\n        ))\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FeesRow;\r\n"],"sourceRoot":""}